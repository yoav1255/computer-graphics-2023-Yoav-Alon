#include "Camera.h"
#include "Utils.h"
#include <iostream>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

Camera::Camera(const glm::vec3& eye, const glm::vec3& at, const glm::vec3& up, const float aspectRatio) :
	zoom(1.0f),
	fovy(glm::pi<float>() / 4.0f),
	height(5),
	zNear(0.1f),
	zFar(200.0f),
	aspectRatio(aspectRatio),
	prespective(true),
	viewTransformation(1),
	eye(eye),
	at(at),
	up(up)
{
	UpdateProjectionMatrix();
	viewTransformation = glm::lookAt(eye, at, up);
}


Camera::~Camera()
{
	
}

void Camera::SetCameraLookAt(const glm::vec3& eye, const glm::vec3& at, const glm::vec3& up)
{
	SetTransformation(glm::mat4(1.0f));
	view_transformation = glm::lookAt(eye,at,up);
	pos = eye;
}


const glm::mat4x4& Camera::GetProjectionTransformation() const
{
	return projection_transformation;
}

const glm::mat4x4& Camera::GetViewTransformation() const
{
	return view_transformation;
}

void Camera::SetTransformation(const glm::mat4x4& transform)
{
	view_transformation = transform;
}
void Camera::SetProjection(const glm::mat4x4& projection)
{
	projection_transformation = projection;
}


glm::mat4x4 Camera::GetTransform()
{// (AB)^-1 = B^-1 * A^-1
	return   worldTransform*objectTransform  ; 
}

glm::mat4x4 Camera::GetObjectTransform()
{
	return objectTransform;
}

glm::mat4x4 Camera::GetWorldTransform()
{
	return worldTransform;
}

void Camera::SetObjectTransform()
{
	glm::mat4 rotateX = glm::rotate(glm::mat4(1.0f), glm::radians(rotationObject.x), glm::vec3(1.0f, 0.0f, 0.0f));
	glm::mat4 rotateY = glm::rotate(glm::mat4(1.0f), glm::radians(rotationObject.y), glm::vec3(0.0f, 1.0f, 0.0f));
	glm::mat4 rotateZ = glm::rotate(glm::mat4(1.0f), glm::radians(rotationObject.z), glm::vec3(0.0f, 0.0f, 1.0f));

	glm::mat4 matRotation = rotateX * rotateY * rotateZ;
	glm::mat4 matTranslation = glm::translate(glm::mat4(1.0f), translationObject);
	glm::mat4 matScale = glm::scale(glm::mat4(1.0f), scaleObject);

	objectTransform = glm::inverse(matTranslation * matRotation * matScale);
}

void Camera::SetWorldTransform()
{
	glm::mat4 rotateX = glm::rotate(glm::mat4(1.0f), glm::radians(rotationWorld.x), glm::vec3(1.0f, 0.0f, 0.0f));
	glm::mat4 rotateY = glm::rotate(glm::mat4(1.0f), glm::radians(rotationWorld.y), glm::vec3(0.0f, 1.0f, 0.0f));
	glm::mat4 rotateZ = glm::rotate(glm::mat4(1.0f), glm::radians(rotationWorld.z), glm::vec3(0.0f, 0.0f, 1.0f));

	glm::mat4 matRotation = rotateX * rotateY * rotateZ;
	glm::mat4 matTranslation = glm::translate(glm::mat4(1.0f), translationWorld);
	glm::mat4 matScale = glm::scale(glm::mat4(1.0f), scaleWorld);
	worldTransform = glm::inverse(matTranslation * matRotation * matScale);


}
